@model CustomerCreateViewModel

<div class="container py-4">
    <h2 class="text-center mb-4">Create Customer</h2>
    <form asp-action="Create" method="post" id="customerForm">

        <!-- Validation Message -->
        <div id="validationMessage" class="mt-2"></div> <!-- This is where the validation message will show -->
        <!-- First Row -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="form-group">
                    <label>Customer Number</label>
                    <input type="text" class="form-control" value="@ViewBag.CustomerNumber" readonly />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="CustomerName">Customer Name</label>
                    <input asp-for="CustomerName" class="form-control" id="CustomerName" />
                    <span asp-validation-for="CustomerName" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="CustomerTypeId">Customer Type</label>
                    <div class="input-group">
                        <select asp-for="CustomerTypeId" asp-items="ViewBag.CustomerTypes" class="form-control">
                            <option>Select Customer Type</option>
                        </select>
                        <button type="button" class="btn btn-outline-secondary" id="addCustomerTypeBtn">
                            <i class="fa fa-plus">+</i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Second Row -->
        <div class="row mb-3">
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="CustomerAddress">Customer Address</label>
                    <input asp-for="CustomerAddress" class="form-control" id="CustomerAddress" />
                    <span asp-validation-for="CustomerAddress" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="BusinessStart">Business Start</label>
                    <input asp-for="BusinessStart" class="form-control" type="date" id="BusinessStart" />
                    <span asp-validation-for="BusinessStart" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label asp-for="CreditLimit">Credit Limit</label>
                    <input asp-for="CreditLimit" class="form-control" />
                </div>
            </div>
        </div>

        <!-- Address List -->
        <div id="addressContainer" class="mb-4">
            <h4 class="mb-3">Delivery Addresses</h4>
            <div id="addressList">
                @for (int i = 0; i < Model.Addresses.Count; i++)
                {
                    <div class="address-item mb-2">
                        <div class="input-group">
                            <input type="text" name="Addresses[@i].AddressName" value="@Model.Addresses[i].AddressName" class="form-control" placeholder="Enter Address" />
                            <button type="button" class="btn btn-danger remove-address">
                                <i class="fa fa-trash">X</i>
                            </button>
                        </div>
                    </div> 
                }
            </div>
            <button type="button" id="addAddressBtn" class="btn btn-secondary">
                <i class="fa fa-plus"></i> Add Address
            </button>
        </div>

        <!-- Submit -->
        <div class="form-group text-center">
            <button type="submit" class="btn btn-primary px-4">Create Customer</button>
            <a asp-action="Index" class="btn btn-primary">
                <i class="fa fa-plus"></i> Back To List
            </a>
        </div>
    </form>

    <!-- Customer Type Modal -->
    <!-- Customer Type Modal -->
    <!-- Customer Type Modal -->
    <!-- Customer Type Modal -->
    <div class="modal fade" id="customerTypeModal" tabindex="-1" aria-labelledby="customerTypeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="customerTypeModalLabel">Select or Create Customer Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Add New Customer Type -->
                    <h6>Create a New Customer Type</h6>
                    <form id="newCustomerTypeForm">
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Customer Number</label>
                                    <input type="text" class="form-control" value="@ViewBag.CustomerTypeNumber" readonly />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="newCustomerTypeName">Customer Type Name</label>
                                    <input type="text" id="newCustomerTypeName" class="form-control" placeholder="Enter Customer Type Name" required>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label for="newCustomerTypeShortName">Short Name</label>
                                    <input type="text" id="newCustomerTypeShortName" class="form-control" placeholder="Enter Short Name">
                                </div>
                            </div>
                        </div>
                    </form>
                    <div>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" id="saveCustomerTypeBtn" class="btn btn-primary">Save</button>
                    </div>
                    <hr />
                    <!-- Table for displaying customer types -->
                    <div class="table-responsive">
                        <table id="customerTypeTable" class="table table-striped table-bordered">
                            <thead>
                                <tr>
                                    <th>Mark</th>
                                    <th>NO</th>
                                    <th>Name</th>
                                    <th>Short Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Data will be dynamically loaded via AJAX -->
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-3">
                        <button id="deleteCustomerTypeBtn" class="btn btn-danger" disabled>Delete Selected</button>
                    </div>
                </div>
            </div>
        </div>
    </div>







</div>

@section Scripts {
    <script>
        document.getElementById('BusinessStart').value = new Date().toISOString().split('T')[0];

        $(document).ready(function () {
            let addressCounter = @Model.Addresses.Count;

            // Function to check if customer or address exists
            function checkCustomerAndAddress() {
                const customerName = $('#CustomerName').val();
                const customerAddress = $('#CustomerAddress').val();

                $.ajax({
                    url: '@Url.Action("ExistCustomerAndAddress", "Customers")',
                    type: 'GET',
                    data: { customerName: customerName, customerAddress: customerAddress },
                    success: function (response) {
                        if (response.success) {
                            $('#validationMessage').removeClass('text-danger').addClass('text-success');
                            $('#validationMessage').text(response.message);
                        } else {
                            $('#validationMessage').text('');
                        }
                    },
                    error: function () {
                        alert('Error while checking customer or address.');
                    }
                });
            }

            // Call the function whenever the customer name or address changes
            $('#CustomerName, #CustomerAddress').on('input', function () {
                checkCustomerAndAddress();
            });

            // Handle form submission with validation message display
            $('#customerForm').submit(function (event) {
                event.preventDefault();  // Prevent form from submitting normally

                $.ajax({
                    url: '@Url.Action("Create", "Customers")',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            // Success message
                            $('#validationMessage').removeClass('text-danger').addClass('text-success');
                            $('#validationMessage').text(response.message);

                            // Redirect to Index after a successful form submission
                            window.location.href = '@Url.Action("Index", "Customers")';  // Replace "Customers" with the appropriate controller name if necessary
                        } else {
                            // Error message
                            $('#validationMessage').removeClass('text-success').addClass('text-danger');
                            $('#validationMessage').text(response.message);
                        }
                    },
                    error: function () {
                        alert('Error while submitting the form.');
                    }
                });
            });

            // Add address dynamically
            $('#addAddressBtn').click(function () {
                const addressHtml = `
                    <div class="address-item mb-2">
                        <div class="input-group">
                            <input type="text" name="Addresses[${addressCounter}].AddressName" class="form-control" placeholder="Enter Address" />
                            <button type="button" class="btn btn-danger remove-address">
                                <i class="fa fa-trash">X</i>
                            </button>
                        </div>
                    </div>`;
                $('#addressList').append(addressHtml);
                addressCounter++;
            });

            // Remove address item
            $(document).on('click', '.remove-address', function () {
                $(this).closest('.address-item').remove();
            });

            //-------------------------------------------------------




            // Show modal to add customer type
                  // Open the modal and load customer types
           // Open the modal and load customer types
                  let customerTypeTable = $('#customerTypeTable').DataTable();

        // Open modal and load customer types
        $('#addCustomerTypeBtn').click(function () {
            // Show the modal
            $('#customerTypeModal').modal('show');

            // Fetch customer types via AJAX
            $.ajax({
                url: '@Url.Action("GetCustomerTypes", "Customers")',
                type: 'GET',
                success: function (data) {
                    // Clear the DataTable
                    customerTypeTable.clear();

                    // Add rows to the DataTable
                    data.forEach(function (type) {
                        console.log('typr', type)
                        customerTypeTable.row.add([
                            `<input type="checkbox" class="mark-customer-type" data-id="${type.customerTypeId}" />`, // Mark checkbox
                            type.customerTypeNo, // ID
                            type.customerTypeName, // Name
                            type.shortName || '-' // Short Name
                        ]).draw();
                    });
                },
                error: function () {
                    alert('Error fetching customer types.');
                }
            });
        });

        // Enable/disable delete button based on marked checkboxes
        $('#customerTypeTable').on('change', '.mark-customer-type', function () {
            const markedCount = $('.mark-customer-type:checked').length;
            $('#deleteCustomerTypeBtn').prop('disabled', markedCount === 0);
        });

        // Save new customer type
        $('#saveCustomerTypeBtn').click(function () {
            const newTypeName = $('#newCustomerTypeName').val().trim();
            const newShortName = $('#newCustomerTypeShortName').val().trim();

            if (!newTypeName) {
                alert('Please enter a Customer Type Name.');
                return;
            }

            $.ajax({
                url: '@Url.Action("CreateCustomerType", "Customers")',
                type: 'POST',
                data: { customerTypeName: newTypeName, shortName: newShortName },
                success: function (response) {
                    if (response.success) {
                        // Reset the form and close the modal
                        $('#newCustomerTypeForm')[0].reset();
                        $('#customerTypeModal').modal('hide');
                    } else {
                        alert('Error creating new customer type.');
                    }
                },
                error: function () {
                    alert('Error creating new customer type.');
                }
            });
        });

        // Delete selected customer types
        $('#deleteCustomerTypeBtn').click(function () {
            
            const markedIds = $('.mark-customer-type:checked').map(function () {
                    return $(this).data('id');
            }).get();
            console.log('idss',markedIds);
            if (markedIds.length === 0) {
                alert('No customer types selected.');
                return;
            }

            if (!confirm('Are you sure you want to delete the selected customer types?')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("DeleteCustomerTypes", "Customers")',
                type: 'POST',
                data: { customerTypeIds: markedIds },
                success: function (response) {
                    if (response.success) {
                        // Refresh the customer type table
                        $('#addCustomerTypeBtn').click();
                    } else {
                        alert('Error deleting customer types.');
                    }
                },
                error: function () {
                    alert('Error deleting customer types.');
                }
            });
        });

    });
    </script>
}
